/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include "mykytea.hpp"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,double > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__get(std::vector< std::pair< std::string,double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__set(std::vector< std::pair< std::string,double > > *self,int i,std::vector< std::pair< std::string,double > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< std::pair< std::string,double > > >::const_reference std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__Sg__get(std::vector< std::vector< std::pair< std::string,double > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__Sg__set(std::vector< std::vector< std::pair< std::string,double > > > *self,int i,std::vector< std::vector< std::pair< std::string,double > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Tags >::const_reference std_vector_Sl_Tags_Sg__get(std::vector< Tags > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Tags_Sg__set(std::vector< Tags > *self,int i,std::vector< Tags >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Pairsd_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::string,double > *)new std::pair< std::string,double >();
  *(std::pair< std::string,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Pairsd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  double arg2 ;
  std::pair< std::string,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  result = (std::pair< std::string,double > *)new std::pair< std::string,double >(arg1,arg2);
  *(std::pair< std::string,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Pairsd_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,double > *arg1 = 0 ;
  std::pair< std::string,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,double > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::string,double > *)new std::pair< std::string,double >((std::pair< std::string,double > const &)*arg1);
  *(std::pair< std::string,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Pairsd_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,double > *arg1 = (std::pair< std::string,double > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,double > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Pairsd_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,double > *arg1 = (std::pair< std::string,double > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,double > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Pairsd_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< std::string,double > *arg1 = (std::pair< std::string,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Pairsd_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< std::string,double > *arg1 = (std::pair< std::string,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1Pairsd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,double > *arg1 = (std::pair< std::string,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,double > **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1PairVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< std::string,double > > *)new std::vector< std::pair< std::string,double > >();
  *(std::vector< std::pair< std::string,double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1PairVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,double > >::size_type arg1 ;
  std::vector< std::pair< std::string,double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< std::string,double > >::size_type)jarg1; 
  result = (std::vector< std::pair< std::string,double > > *)new std::vector< std::pair< std::string,double > >(arg1);
  *(std::vector< std::pair< std::string,double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  std::vector< std::pair< std::string,double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  result = ((std::vector< std::pair< std::string,double > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  std::vector< std::pair< std::string,double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  result = ((std::vector< std::pair< std::string,double > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  std::vector< std::pair< std::string,double > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< std::string,double > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  std::vector< std::pair< std::string,double > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,double > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,double > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::pair< std::string,double > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,double > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< std::string,double > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::pair< std::string,double > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,double > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,double > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,double > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__set(arg1,arg2,(std::pair< std::string,double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1PairVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::string,double > > *arg1 = (std::vector< std::pair< std::string,double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::string,double > > **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1PairVectorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< std::string,double > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< std::pair< std::string,double > > > *)new std::vector< std::vector< std::pair< std::string,double > > >();
  *(std::vector< std::vector< std::pair< std::string,double > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1PairVectorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< std::string,double > > >::size_type arg1 ;
  std::vector< std::vector< std::pair< std::string,double > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< std::pair< std::string,double > > >::size_type)jarg1; 
  result = (std::vector< std::vector< std::pair< std::string,double > > > *)new std::vector< std::vector< std::pair< std::string,double > > >(arg1);
  *(std::vector< std::vector< std::pair< std::string,double > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,double > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::pair< std::string,double > > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,double > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::pair< std::string,double > > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,double > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  arg2 = (std::vector< std::vector< std::pair< std::string,double > > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< std::pair< std::string,double > > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,double > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< std::pair< std::string,double > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::pair< std::string,double > > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< std::pair< std::string,double > > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::pair< std::string,double > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::pair< std::string,double > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< std::pair< std::string,double > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_PairVectorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::pair< std::string,double > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::pair< std::string,double > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::pair< std::string,double > > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_double_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::pair< std::string,double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1PairVectorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::pair< std::string,double > > > *arg1 = (std::vector< std::vector< std::pair< std::string,double > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< std::pair< std::string,double > > > **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1TagsVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Tags > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Tags > *)new std::vector< Tags >();
  *(std::vector< Tags > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1TagsVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Tags >::size_type arg1 ;
  std::vector< Tags > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Tags >::size_type)jarg1; 
  result = (std::vector< Tags > *)new std::vector< Tags >(arg1);
  *(std::vector< Tags > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  std::vector< Tags >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  result = ((std::vector< Tags > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  std::vector< Tags >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  result = ((std::vector< Tags > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  std::vector< Tags >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  arg2 = (std::vector< Tags >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  result = (bool)((std::vector< Tags > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  std::vector< Tags >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  arg2 = *(std::vector< Tags >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Tags >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Tags >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  int arg2 ;
  std::vector< Tags >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Tags >::value_type *) &std_vector_Sl_Tags_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Tags >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_TagsVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  int arg2 ;
  std::vector< Tags >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Tags >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Tags >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Tags_Sg__set(arg1,arg2,(Tags const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1TagsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Tags > *arg1 = (std::vector< Tags > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Tags > **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1readModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try{
      (arg1)->readModel((char const *)arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1writeModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try{
      (arg1)->writeModel((char const *)arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1calculateWS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  KyteaSentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = *(KyteaSentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaSentence & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->calculateWS(*arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1calculateTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  KyteaSentence *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = *(KyteaSentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaSentence & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try{
      (arg1)->calculateTags(*arg2,arg3);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1calculateUnknownTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  KyteaWord *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = *(KyteaWord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaWord & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try{
      (arg1)->calculateUnknownTag(*arg2,arg3);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1getStringUtil(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  kytea::StringUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      result = (kytea::StringUtil *)(arg1)->getStringUtil();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::StringUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1getConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  kytea::KyteaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      result = (kytea::KyteaConfig *)(arg1)->getConfig();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::KyteaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1trainAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      (arg1)->trainAll();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1analyze(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      (arg1)->analyze();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      (arg1)->init();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Kytea_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kytea::Kytea *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (kytea::Kytea *)new kytea::Kytea();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::Kytea **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Kytea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  kytea::KyteaConfig *arg1 = (kytea::KyteaConfig *) 0 ;
  kytea::Kytea *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kytea::KyteaConfig **)&jarg1; 
  {
    try{
      result = (kytea::Kytea *)new kytea::Kytea(arg1);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::Kytea **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1Kytea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1getWSModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  kytea::KyteaModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  {
    try{
      result = (kytea::KyteaModel *)(arg1)->getWSModel();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::KyteaModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1setWSModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  kytea::KyteaModel *arg2 = (kytea::KyteaModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = *(kytea::KyteaModel **)&jarg2; 
  {
    try{
      (arg1)->setWSModel(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Kytea_1checkEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kytea::Kytea *arg1 = (kytea::Kytea *) 0 ;
  kytea::Kytea *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kytea::Kytea **)&jarg1; 
  arg2 = *(kytea::Kytea **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kytea::Kytea const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->checkEqual((kytea::Kytea const &)*arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI__1_1KyteaTagLessThan_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  kytea::KyteaTag *arg1 = 0 ;
  kytea::KyteaTag *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kytea::KyteaTag **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kytea::KyteaTag const & reference is null");
    return 0;
  } 
  arg2 = *(kytea::KyteaTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kytea::KyteaTag const & reference is null");
    return 0;
  } 
  {
    try{
      result = (bool)kytea::operator <((std::pair< KyteaString,double > const &)*arg1,(std::pair< KyteaString,double > const &)*arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1KyteaWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  KyteaString *arg1 = 0 ;
  KyteaString *arg2 = 0 ;
  kytea::KyteaWord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KyteaString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaString const & reference is null");
    return 0;
  } 
  arg2 = *(KyteaString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaString const & reference is null");
    return 0;
  } 
  {
    try{
      result = (kytea::KyteaWord *)new kytea::KyteaWord((KyteaString const &)*arg1,(KyteaString const &)*arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::KyteaWord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1surface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  KyteaString arg2 ;
  KyteaString *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  argp2 = *(KyteaString **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null KyteaString");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->surface = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1surface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  KyteaString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  result =  ((arg1)->surface);
  *(KyteaString **)&jresult = new KyteaString((const KyteaString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1norm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  KyteaString arg2 ;
  KyteaString *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  argp2 = *(KyteaString **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null KyteaString");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->norm = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1norm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  KyteaString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  result =  ((arg1)->norm);
  *(KyteaString **)&jresult = new KyteaString((const KyteaString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1tags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  std::vector< std::vector< kytea::KyteaTag > > *arg2 = (std::vector< std::vector< kytea::KyteaTag > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = *(std::vector< std::vector< kytea::KyteaTag > > **)&jarg2; 
  if (arg1) (arg1)->tags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1tags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  std::vector< std::vector< kytea::KyteaTag > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  result = (std::vector< std::vector< kytea::KyteaTag > > *)& ((arg1)->tags);
  *(std::vector< std::vector< kytea::KyteaTag > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1isCertain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCertain = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1isCertain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  result = (bool) ((arg1)->isCertain);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1unknown_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->unknown = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1unknown_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  result = (bool) ((arg1)->unknown);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1limitTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try{
      (arg1)->limitTags(arg2,arg3);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1getNumTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  {
    try{
      result = (int)((kytea::KyteaWord const *)arg1)->getNumTags();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  kytea::KyteaTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (kytea::KyteaTag *)((kytea::KyteaWord const *)arg1)->getTag(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::KyteaTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  std::vector< kytea::KyteaTag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (std::vector< kytea::KyteaTag > *) &((kytea::KyteaWord const *)arg1)->getTags(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< kytea::KyteaTag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1getTagSurf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  KyteaString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (KyteaString *) &((kytea::KyteaWord const *)arg1)->getTagSurf(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(KyteaString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1getTagConf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (double)((kytea::KyteaWord const *)arg1)->getTagConf(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1setTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  kytea::KyteaTag *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(kytea::KyteaTag **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kytea::KyteaTag const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->setTag(arg2,(kytea::KyteaTag const &)*arg3);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1setTagConf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try{
      (arg1)->setTagConf(arg2,arg3);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1clearTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      (arg1)->clearTags(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1addTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  kytea::KyteaTag *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(kytea::KyteaTag **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kytea::KyteaTag const & reference is null");
    return ;
  } 
  {
    try{
      (arg1)->addTag(arg2,(kytea::KyteaTag const &)*arg3);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1setUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try{
      (arg1)->setUnknown(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1getUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  {
    try{
      result = (bool)((kytea::KyteaWord const *)arg1)->getUnknown();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaWord_1hasTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try{
      result = (bool)((kytea::KyteaWord const *)arg1)->hasTag(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1KyteaWord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kytea::KyteaWord *arg1 = (kytea::KyteaWord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kytea::KyteaWord **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1surface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  KyteaString arg2 ;
  KyteaString *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  argp2 = *(KyteaString **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null KyteaString");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->surface = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1surface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  KyteaString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  result =  ((arg1)->surface);
  *(KyteaString **)&jresult = new KyteaString((const KyteaString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1norm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  KyteaString arg2 ;
  KyteaString *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  argp2 = *(KyteaString **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null KyteaString");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->norm = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1norm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  KyteaString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  result =  ((arg1)->norm);
  *(KyteaString **)&jresult = new KyteaString((const KyteaString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1wsConfs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  kytea::KyteaSentence::Floats *arg2 = (kytea::KyteaSentence::Floats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  arg2 = *(kytea::KyteaSentence::Floats **)&jarg2; 
  if (arg1) (arg1)->wsConfs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1wsConfs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  kytea::KyteaSentence::Floats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  result = (kytea::KyteaSentence::Floats *)& ((arg1)->wsConfs);
  *(kytea::KyteaSentence::Floats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  kytea::KyteaSentence::Words *arg2 = (kytea::KyteaSentence::Words *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  arg2 = *(kytea::KyteaSentence::Words **)&jarg2; 
  if (arg1) (arg1)->words = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  kytea::KyteaSentence::Words *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  result = (kytea::KyteaSentence::Words *)& ((arg1)->words);
  *(kytea::KyteaSentence::Words **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1KyteaSentence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kytea::KyteaSentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (kytea::KyteaSentence *)new kytea::KyteaSentence();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::KyteaSentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1KyteaSentence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  KyteaString *arg1 = 0 ;
  KyteaString *arg2 = 0 ;
  kytea::KyteaSentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KyteaString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaString const & reference is null");
    return 0;
  } 
  arg2 = *(KyteaString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "KyteaString const & reference is null");
    return 0;
  } 
  {
    try{
      result = (kytea::KyteaSentence *)new kytea::KyteaSentence((KyteaString const &)*arg1,(KyteaString const &)*arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(kytea::KyteaSentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_KyteaSentence_1refreshWS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try{
      (arg1)->refreshWS(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1KyteaSentence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kytea::KyteaSentence *arg1 = (kytea::KyteaSentence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kytea::KyteaSentence **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Tags_1surface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Tags *arg1 = (Tags *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tags **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->surface = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Tags_1surface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tags *arg1 = (Tags *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tags **)&jarg1; 
  result = (std::string *) & ((arg1)->surface);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Tags_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tags *arg1 = (Tags *) 0 ;
  tags *arg2 = (tags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tags **)&jarg1; 
  arg2 = *(tags **)&jarg2; 
  if (arg1) (arg1)->tag = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Tags_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tags *arg1 = (Tags *) 0 ;
  tags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tags **)&jarg1; 
  result = (tags *)& ((arg1)->tag);
  *(tags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Tags(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try{
      result = (Tags *)new Tags();
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Tags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1Tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tags *arg1 = (Tags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tags **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_new_1Mykytea(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Mykytea *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try{
      result = (Mykytea *)new Mykytea(arg1);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Mykytea **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_linkedin_kytea_LiKyteaJNI_delete_1Mykytea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Mykytea *arg1 = (Mykytea *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Mykytea **)&jarg1; 
  {
    try{
      delete arg1;
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Mykytea_1getWS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Mykytea *arg1 = (Mykytea *) 0 ;
  std::string arg2 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Mykytea **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try{
      result = (std::vector< std::string > *)(arg1)->getWS(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Mykytea_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Mykytea *arg1 = (Mykytea *) 0 ;
  std::string arg2 ;
  std::vector< Tags > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Mykytea **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try{
      result = (std::vector< Tags > *)(arg1)->getTags(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< Tags > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Mykytea_1getAllTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Mykytea *arg1 = (Mykytea *) 0 ;
  std::string arg2 ;
  std::vector< Tags > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Mykytea **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try{
      result = (std::vector< Tags > *)(arg1)->getAllTags(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< Tags > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_linkedin_kytea_LiKyteaJNI_Mykytea_1getTagsToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Mykytea *arg1 = (Mykytea *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Mykytea **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try{
      result = (arg1)->getTagsToString(arg2);
    } catch (const std::exception &e){
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

